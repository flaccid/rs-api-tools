#!/usr/bin/ruby

$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

def usage
  puts "usage: rs-create-deployment"
  puts ''
  puts "See rs-create-deployment --help for more information on usage."
end

def usage_exit
  usage; exit
end

def help_info
  puts("#{File.basename($0)}")
  puts ''
  puts "Creates a RightScale Deployment."
  puts ''
  puts "examples:  rs-create-deployment --name Gremlins"
  puts "           rs-create-deployment --metadata https://raw.github.com/rightscale-meta/deployments/master/base_servertemplate_for_linux_v13.5.yaml --edit"
  puts "           rs-create-deployment --metadata rightscale.yaml"
  puts ''
end

require 'rubygems'
require 'getoptlong'
require 'yesno'
require 'yaml'
require 'rightscale_metadata'

deployment = Hash.new
deployment['name'] = false
deployment['description'] = ''
deployment['server_tag_scope'] = 'account'
deployment['metadata_source'] = false

settings = Hash.new
settings['interactive'] = true
settings['verbose'] = false
settings['dry'] = false
settings['edit'] = false
settings['debug'] = false
settings['help'] = false

opts = GetoptLong.new(
  [ '--name', '-n', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--description', '-d', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--metadata', '-m', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--non-interactive', GetoptLong::NO_ARGUMENT ],
  [ '--edit', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--debug', '-D', GetoptLong::NO_ARGUMENT ],
  [ '--dry', GetoptLong::NO_ARGUMENT ],
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
  when '--name'
    deployment['name'] = arg
  when '--description'
    deployment['description'] = arg
  when '--metadata'
    deployment['metadata_source'] = arg
  when '--non-interactive'
    settings['interactive'] = false
  when '--help'
    settings['help'] = true
  when '--verbose'
    settings['verbose'] = true
  when '--debug'
    settings['debug'] = true
  when '--dry'
    settings['dry'] = true
  when '--edit'
    settings['edit'] = true
	end
end

if settings['help']
  help_info
  exit
end

puts settings if (settings['debug'] || settings['verbose'])
usage_exit if !(deployment['name'] || deployment['metadata_source'])

require 'right_api_client'
rightscale = RightApi::Client.new(YAML.load_file(File.join(ENV['HOME'], '.rightscale', 'right_api_client.yml')))

# creation via supply of metadata file
if deployment['metadata_source']
  metadata = RightScaleMetadata.new(deployment['metadata_source']).metadata
  if settings['edit']
    require 'securerandom'

    def editor_command
      ENV.fetch('EDITOR') { 'vi' }
    end
    temp_path = "/tmp/rs-meta-#{Process.pid}-#{SecureRandom.hex}"
    puts "metadata tempfile: #{temp_path}" if settings['debug'] if settings['debug']
    IO.write(temp_path, YAML::dump(metadata))
    system("#{editor_command} #{temp_path}")
    metadata = RightScaleMetadata.new(temp_path).metadata
  end
  deployment.merge!(metadata['deployment'])
end

puts "Creating deployment, '#{deployment['name']}'."
puts deployment if (settings['verbose'] || settings['debug'])

if settings['dry']
  puts 'Dry run, skipping creation of deployment.'
  exit
else
  created_deployment = rightscale.deployments.create({ :deployment => deployment })
  puts "Success, resource href: #{created_deployment.href}."
end

# create servers if metadata is supplied
if deployment['metadata_source']
  puts 'Creating servers...'
  puts deployment['servers'] if settings['debug']
  deployment['servers'].each { |server|
    server['instance'] = Hash.new
    server['deployment_href'] = created_deployment.href

    if server['server_template'].kind_of?(String)
      server['server_template'] = RightScaleMetadata.new(server['server_template']).metadata['server_template']
    end
    if server['server_template'].key? 'id'
      server['instance']['server_template_href'] = server['server_template']['id']
    else
      # import first
      puts "Importing publication, #{server['server_template']['publication_id']}."
      publication = rightscale.publications(:id => "#{server['server_template']['publication_id']}")
      import = publication.import
      puts "Imported '#{import.show.name}' [rev #{import.show.revision}] (#{import.show.href})."
      server['instance']['server_template_href'] = import.show.href
    end

    server['instance']['cloud_href'] = "/api/clouds/#{server['cloud_id']}"
    
    puts 'Creating server.'
    puts "server: #{server}" if (settings['debug'] || settings['verbose'])
    created_server = rightscale.servers.create({ :server => server })
    puts "Success, resource href: #{created_server.href}."
  }
end
