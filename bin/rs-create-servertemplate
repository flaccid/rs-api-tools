#!/usr/bin/ruby

def usage
  puts "usage: rs-create-servertemplate [--name <server_template_name>] --name <server_template_description>] [[--help]]"
  puts ''
  puts "See rs-create-servertemplate --help for more information on usage."
end

def usage_exit
  usage; exit
end

def help_info
  puts("#{$0}")
  puts ''
  puts "Creates a RightScale ServerTemplate."
  puts ''
  puts "examples:  rs-create-servertemplate --name 'Skynet Terminator Terminator' --description 'Ends all Skynet terminators.'"
  puts "           rs-create-servertemplate --metadata rightscale.yaml"
  puts ''
end

require 'rubygems'
require 'getoptlong'

server_template = Hash.new
server_template['name'] = false
server_template['description'] = ''

metadata = false
import = true
create_repo = true
interactive = true
verbose = false
dry = false
debug = false
help = false

opts = GetoptLong.new(
  [ '--name', '-n', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--description', '-d', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--metadata', '-m', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--no-import', GetoptLong::NO_ARGUMENT ],
  [ '--non-interactive', GetoptLong::NO_ARGUMENT ],
  [ '--no-create-repo', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--debug', '-D', GetoptLong::NO_ARGUMENT ],
  [ '--dry', GetoptLong::NO_ARGUMENT ],
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
  when '--name'
    server_template['name'] = arg
  when '--description'
    server_template['description'] = arg
  when '--metadata'
    metadata = arg
  when '--no-import'
    import = false
  when '--non-interactive'
    interactive = false
  when '--no-create-repo'
    create_repo = false
  when '--help'
    help = true
  when '--verbose'
    verbose = true
  when '--debug'
    debug = true
  when '--dry'
    dry = true
	end
end

if help
  help_info
  exit
end

usage_exit if !(server_template['name'] || metadata)

def yesno
  begin
    system("stty raw -echo")
    str = STDIN.getc
  ensure
    system("stty -raw echo")
  end
  if str.downcase == "y"
    return true
  elsif str.downcase == "n"
    return false
  else
    raise "Invalid response. Please enter y/n."
  end
end

require 'yaml'
require 'right_api_client'
rightscale = RightApi::Client.new(YAML.load_file(File.join(ENV['HOME'], '.rightscale', 'right_api_client.yml')))

# creation via supply of metadata file
if metadata
  require 'net/http'
  require 'uri'
  require 'yaml'

  uri = URI.parse(metadata)
  if %w( http https ).include?(uri.scheme)
    metadata = YAML.parse(Net::HTTP.get(uri))
  else
    metadata = YAML.load_file(metadata)
  end

  server_template = metadata['server_template']
end

puts "Creating ServerTemplate, '#{server_template['name']}'."
puts server_template if verbose
if dry
  puts 'Dry run, skipping creation of ServerTemplate'
else
  st = rightscale.server_templates.create({ :server_template => server_template })
  puts "Success, resource href: #{st.href}."
end

if metadata
  # add tags to server_template
  server_template['tags'].each { |tag|
    system("rs-tag-resource --href #{st.href} --tag '#{tag}'")
  }

  # import multi-cloud images (if needed TODO), and
  # add multi-cloud images to server_template
  server_template['multi_cloud_images'].each { |mci|
    make_default = ''
    if (import && mci['publication_id'])
      if interactive
        puts "Import published MCI, #{mci['publication_id']} ? (y/n)"
        import_mci = yesno
      else
        import_mci = true
      end
      system("rs-import-publication --id #{mci['publication_id']}") if import_mci
    end
    if mci['id']
      if mci['default']
        make_default = ' --default'
      end
      system("rs-create-servertemplate-mci --servertemplate #{st.href.split('/')[-1]} --mci #{mci['id']}#{make_default}")
    end
  }

  # create cookbook repositories/import cookbooks
  if server_template['cookbooks'] == 'Cheffile'
    require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'librarian_chef_dsl_parser'))
    library = LibrarianChefDSLParser.new("#{Dir.pwd}/Cheffile")
    create_repos = true
    if interactive
      puts 'Do you need to create the Chef cookbook repositories ? (y/n)'
      create_repos = yesno
    end
    if (create_repos && create_repo)
      puts 'Setting up repositories from Cheffile.'
      system("rs-create-repositories --cheffile #{Dir.pwd}/Cheffile")
    end
    puts 'Determining cookbooks for ServerTemplate...'
    cookbook_hrefs = Array.new
    library.cookbooks.each { |cookbook|
      filter = Array.new
      filter.push("name==#{cookbook['name']}")
      filter.push("namespace==primary")
      puts "filter: #{filter}" if debug
      cookbooks = rightscale.cookbooks.index(:filter => filter).select{ |c|    
        c.raw['source_info_summary'] == "#{cookbook['name']} #{cookbook['options'][:ref]}"
      }
      cookbook_hrefs.push(cookbooks.first.href)
    }
    puts "cookbook hrefs: #{cookbook_hrefs}" if (verbose || debug)
    # TODO: multi_attach
    puts 'Attaching cookbooks to ServerTemplate.'
    cookbook_hrefs.each { |href|
      rightscale.server_templates(:id => st.href.split('/')[-1]).show.cookbook_attachments.create({ 'cookbook_attachment' => { 'cookbook_href' => "#{href}" }})
    }
  end

  # bind executables
  if server_template['boot_scripts'] == 'node.json'
    require 'json'
    recipes = JSON.parse(IO.read("#{Dir.pwd}/node.json"))['run_list'].map {|s| s.gsub('recipe[', '').gsub(']', '')}
    recipes.each { |recipe|
      puts "Adding recipe, '#{recipe}' to boot scripts."
      system("rs-bind-executable --id #{st.href.split('/')[-1]} --recipe #{recipe}")
    }
  end
  
  # configure inputs
  if server_template['inputs'] == 'node.json'
    puts 'Configuring inputs on ServerTemplate.'
    require 'json'
    node_attributes = JSON.parse(IO.read("#{Dir.pwd}/node.json")).reject{|k| k == 'run_list'}
    inputs = Array.new
    node_attributes.each { |cookbook, attrs|
      node_attributes[cookbook].each { |key, val|
        if val.kind_of?(String) || val.kind_of?(TrueClass) || val.kind_of?(FalseClass)
          input = { "#{cookbook}/#{key}" => "text:#{val}" }
          inputs.push(input)
        elsif val.kind_of?(Array)
          input = { "#{cookbook}/#{key}" => "array:#{val.join(',')}" }
          inputs.push(input)
        elsif val.kind_of?(Hash)
          val.each { |sub_key, sub_val|
            if sub_val.kind_of?(Array)
              input = { "#{cookbook}/#{key}/#{sub_key}" => "array:#{sub_val.join(',')}" }
            else
              input = { "#{cookbook}/#{key}/#{sub_key}" => "text:#{sub_val}" }
            end
            inputs.push(input)
          }
        end
      }
    }
    puts "inputs: #{inputs}" if debug
    # bulk (needs testing)
    #rightscale.server_templates(:id => st.href.split('/')[-1]).show.inputs.multi_update({ :inputs => inputs })
    # individually
    inputs.each { |i|
      puts "Adding input, #{i.first[0]}=#{i.first[1]}." if verbose
      system("rs-update-input --verbose --servertemplate --id #{st.href.split('/')[-1]} #{i.first[0].to_s} #{i.first[1].to_s}") 
    }
  end
  
  # add alerts
  server_template['alerts'].each { |alert|
    system("rs-create-alert --resource ServerTemplate --id #{st.href.split('/')[-1]} --name '#{alert['name']}' --file '#{alert['file']}' --value '#{alert['value']}' --condition '#{alert['condition']}' --threshold '#{alert['threshold']}' --duration #{alert['duration']} --escalation '#{alert['escalation_name']}' --verbose")
  }  

end
