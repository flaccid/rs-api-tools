#!/usr/bin/ruby

# rs-describe-servers [--filter <filter>]

# e.g. rs-describe-servers
#      rs-describe-servers --filter "ip_address=44.1.2.3"    # server-side filter
#      rs-describe-servers --filter "state=operational"         # client-side filter

require 'rubygems'
require 'getoptlong'

def usage
  puts("#{$0} [--xml] [--json]")
	exit
end

opts = GetoptLong.new(
  [ '--filter', '-f', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--current', '-c', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--field', '-F', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--raw', '-r', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--xml', '-x', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--json', '-j', GetoptLong::OPTIONAL_ARGUMENT ]
)

filter = false
json = false
xml = false
raw = false
field = false

opts.each do |opt, arg|
  case opt
    when '--filter'
      filter = arg.split('=')
    when '--json'
      json = true
    when '--xml'
      xml = true
    when '--raw'
      raw = true
    when '--field'
      field = arg
  end
end

filters = [ 'aws_id', 'created_at', 'deployment_href', 'ip_address', 'nickname', 'private_ip_address', 'updated_at' ]  

require 'rest_connection'
require 'json'
  
if filter
  if filters.include? filter[0]
    # server-side filter
    servers = Server.find_with_filter(filter[0] => filter[1])
  else
    # client-side filter
    servers = Server.find(:all) {|server| server.params[filter[0]] == filter[1]}
  end
else
  servers = Server.find_all()
end

if json
  servers_formatted = Array.new
  servers.each do |server|
    servers_formatted.push(server.params)
  end
  puts JSON.pretty_generate(servers_formatted)
elsif xml
  require "active_support/core_ext"
  puts "<servers>"
  servers.each do |server|
    puts JSON.parse(server.params.to_json).to_xml(:root => 'server', :skip_instruct => true)
  end
  puts "</servers>"
elsif raw
  servers.each do |server|
    #print server.state
    if server.state == ('operational'||'stranded'||'booting'||'decommissioning')
      #puts server.state
      server.reload_as_current
      #puts server.settings.to_yaml
      #server.reload_as_current
      #puts server.to_yaml
      if field
        puts server.settings[field]
      else
        puts server
      end
    end
  end
else
  puts servers.to_yaml      # output yaml by default for readability
end