#!/usr/bin/ruby

# rs-set-input

require 'rubygems'
require 'getoptlong'

def usage
  puts("rs-update-input [[--current]] [--server --id <server_id> | --deployment --id <deployment_id>] <input_name> <input_value>")

	exit
end

opts = GetoptLong.new(
  [ '--current', '-c', GetoptLong::NO_ARGUMENT ],
  [ '--server', '-s', GetoptLong::NO_ARGUMENT ],
  [ '--deployment', '-d', GetoptLong::NO_ARGUMENT ],
  [ '--servertemplate', '-t', GetoptLong::NO_ARGUMENT ],
  [ '--id', '-i', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ]
)

server = false
servertemplate = false
name = false
current = false
deployment = false
id = false
show_help = false
input_name = false
input_value = false
verbose = false

opts.each do |opt, arg|
  case opt
    when '--current'
      current = true
    when '--server'
      server = true
    when '--deployment'
      deployment = true
    when '--servertemplate'
      servertemplate = true
	  when '--id'
		  id = arg
    when '--name'
      name = arg
    when '--verbose'
      verbose = true
  end
end

usage if !(server || deployment || servertemplate)
usage if !(id || name || ARGV[0] || ARGV[1])

input_name = ARGV[0] if ARGV[0]
input_value = ARGV[1] if ARGV[1]

# get server
if server
  require 'rest_connection'
  if name
    puts "Finding server: '%#{name}%'"
    server = Server.find(:first) { |s| s.nickname =~ /#{name}/ }
    puts "Found server, '#{server.nickname}'."
    puts server.to_yaml if verbose
  elsif id
    server = Server.find(server_id.to_i)
  end
  # update input
  server.reload_current() if current
  server.set_input(input_name, input_value)
elsif servertemplate
  require 'yaml'
  require 'right_api_client'
  rightscale = RightApi::Client.new(YAML.load_file(File.join(ENV['HOME'], '.rightscale', 'right_api_client.yml')))
  
  inputs = Array.new
  inputs.push({ 'name' => input_name })
  inputs.push({ 'value' => input_value })
  
  puts "input: #{inputs}" if verbose
  rightscale.server_templates(:id => id).show.inputs.multi_update({ :inputs => inputs })
end
