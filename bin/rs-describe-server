#!/usr/bin/ruby

# rs-describe-server

require 'rubygems'
require 'getoptlong'

def usage
  puts("usage:  rs-describe-server --settings [current] [--name <server_nickname> | --id <server_id>]")
  puts("           [[--verbose]] [[--api]]")
end

def usage_exit
  usage; exit
end

def help
  usage
  puts ''
  puts 'Describes a RightScale server.'
  puts ''
  puts "examples:  rs-describe-server --id 836587 --settings current --api 1.5"
  puts ''
  exit
end

opts = GetoptLong.new(
  [ '--name', '-n', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--settings', '-s', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--id', '-i', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--xml', '-x', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--json', '-j', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--api', '-a', GetoptLong::OPTIONAL_ARGUMENT ]
)

server_name = false
server_id = false
settings = false
json = false
xml = false
verbose = false
server = false
api_version = '1.0'

opts.each do |opt, arg|
  case opt
    when '--name'
      server_name = arg
    when '--settings'
      settings = arg
      usage_exit if !(settings = 'current' || settings = 'next')
    when '--id'
      server_id = arg  
    when '--json'
      json = true
    when '--xml'
      xml = true
    when '--verbose'
      verbose = true
    when '--api'
      api_version = arg
	end
end

usage_exit if !(server_name || server_id)

require 'json'
require 'rest_connection'

# get server
if server_name
  puts "Finding server: '%#{server_name}%'"
  if api_version == '1.5'
    server = Server.find(:first) { |s| s.nickname =~ /#{server_name}/ }
  else
    server = McServer.find(:first) { |s| s.nickname =~ /#{server_name}/ }
  end
elsif server_id
  if api_version == '1.5'
    server = McServer.find(server_id.to_i)
  else
    server = Server.find(server_id.to_i)
  end
else
  usage_exit
end

if server
  puts "Found server, '#{server.nickname}'."
else
  puts "No server found!"
end

if settings
  if settings == 'next'
    server_settings = server.settings
  elsif settings == 'current'
    server.reload_current
    server_settings = server.settings
  end
  api_result = server_settings
else
  api_result = server
end

if json
  puts api_result.to_json
elsif xml
  require 'xmlsimple'
  puts JSON.parse(api_result.to_json).to_xml(:root => 'servers', :skip_instruct => true)
else
  puts api_result.to_yaml
end